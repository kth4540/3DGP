메모리 DC에 렌더링을 먼저 한 후, 클라이언트 DC에 한번에 그림(present)->화면에 그리는 횟수가 줄어듬 

씬을 animate 후 render , animate 하는 이상적인 속도는 1/60이지만 상황마다 다름

##벡터

	요소별 연산

		벡터의 덧셈
		
		벡터의 뺄셈
		
		스칼라 곱->벡터의 크기나 방향(반대방향)을 바꿀 수 있음

	벡터 A와 B가 모두 점을 나타내는 벡터일 때, A-B=BA (B에서 A로 향하는 벡터)

##벡터 정규화

	단위 벡터= 크기가 1인 벡터->방향 벡터

	크기가 1이 아닌 벡터를 만드는 것을 정규화라고 함
	(벡터 크기가 2일 때, 1/2를 곱해 1로 만듬 )

	단위 벡터는 다각형이 향하는 방향을 나타내기 위해 사용될 수 있음
	
##벡터의 외적

	두 벡터의 외저 연산의 결과는 두 벡터에 각각 수직인 벡터

	a(0,1,0), b=(1,0,0)->c=axb=)

	a x b = - ( b x a )

	a x b의 크기= a의 크기*b의 크기 * sin($)

##법선벡터

	면, 혹은 선에 수직인 벡터(Normal)

	점 v0, v1, v2가 주어졌을 때, v1-v0, v0-v2를 통해 면을 하나 얻을 수 있고 그 면에 수직인 벡터

##회전 변환

	반시계방향 = + , 시계방향 = -

	오른손 좌표계일 때, 4개의 손가락이 구부러지는 방향이 + 방향

	왼손 좌표계는 반대

	회전 축을 찾기 위해 벡터 A와 벡터 B에 모두 수직인 벡터를 외적으로 구한 후

##벡터의 내적

	벡터의 외적은 벡터지만, 벡터의 내적은 실수임

	A . B = (A.x*B.x) + (A.y*B.y) + (A.z*B.z)

	A . B = A의 크기 * B의 크기 * cos($) -> cos($) = A . B/A의 크기 * B의 크기

	내적에서 두 벡터는 같은 시작점을 가져야 함